diff --git a/README.mkd b/README.mkd
new file mode 100644
index 0000000..280692e
--- /dev/null
+++ b/README.mkd
@@ -0,0 +1,86 @@
+# pkgtool
+
+pkgtool a image construction tool and firmware installer used in the Outernet's
+Lighthouse firmware. This package consists of three parts:
+
+* pkgtool: firmware verification tool
+* mkpkg: firmware packager
+* installer: firmware installation tool
+
+## Build notes
+
+When building the pkgtool suite, please keep in mind that pkgtool and installer
+are compiled for the target arch (e.g., ARM), while the mkpkg is compiled for
+the host arch (the machine on which the firmware package is created).
+Furthermore, the installer binary is build so that it is later linked into
+mkpkg so that mkpkg tool can create a package file that includes it.
+
+## Firmware package
+
+Firmware package is a binary executable that contains a payload with everything
+it needs to install itself.
+
+The firmware package layout is as follows:
+
+    |------------------|
+    |  installer bin   |
+    |------------------|
+    |     object 0     |
+    |~~~~~~~~~~~~~~~~~~|
+           . . .
+    |~~~~~~~~~~~~~~~~~~|
+    |     object n     |
+    |------------------|
+    |      index       |
+    |------------------|
+    |   certificate    |
+    |------------------|
+    |      footer      |
+    |------------------|
+
+The installer binary is present at the beginning of the package, followed by
+one or more objects which represent files. The file index follows the objects
+and maps objects to file names. Optional signature certificate is added between
+the index and the footer.
+
+The footer is used for verifying the image. It contains information such as the
+offset to the file index, number of objects contained in the package, and so
+on. You can see the exact layout of the footer in `common.h` file.
+
+## Creating a package
+
+To create a package, we use the `mkpkg` command. The `-o` switch is used to
+specify the output file name. Positional arguments are treated as payload
+(objects). 
+
+    mkpkg -o my.pkg path/to/file1 path/to/file2
+
+Each file that should be part of the payload can be renamed in the
+package file by appending a colon followed by desired name:
+
+    mkpkg -o my.pkg path/to/file1:foo1 path/to/file2
+
+A file named `run.sh` must be present in the firmware package. This file
+controls the firmware installation and can have arbitrary contents. The
+installer binary executes this file when the package is unpacked. A typical
+firmware package may be generated like so:
+
+    mkpkg -o my.pkg path/to/upgrade.sh:run.sh path/to/kernel.img \
+        path/to/rootfs.img
+
+The `upgrade.sh` may contain code that 'flashes' the firmware or otherwise
+installs the new kernele and rootfs images.
+
+## Signed and unsigned packages
+
+The firmware packages can be signed and unsigned. Signed packages contain a
+certificate which `pkgtool` uses to verify that firmware comes from a known
+source. If no certificate is passed to `mkpkg`, the resulting firmware package
+is unsigned.
+
+To create a signed package, you will need a certificate file and it's password.
+
+    mkpkg -k path/to/certificate.pem -p "Certificate password" \
+        -o my.pkg path/to/upgrade.sh:run.sh path/to/kernel.img \
+        path/to/rootfs.img
+
diff --git a/installer.cpp b/installer.cpp
index 90dc661..6f16ace 100644
--- a/installer.cpp
+++ b/installer.cpp
@@ -491,7 +491,7 @@ static int lookup_ubivol_id( const char *name, int dev )
 				int len = read( fd, buf, sizeof( buf ) );
 				if ( len > 0 )
 				{
-					if( 0 == strncmp( buf, name, len - 1 ))
+					if( ((len -1) == strlen(name)) && (0 == strncmp( buf, name, strlen(name) )))
 					{
 						vol_id = id;
 						break;
@@ -550,7 +550,8 @@ int ubi( const char *file, const char *target )
 		return -1;
 	}
 
-	log_printf( LOG_INFO, "writing %s to ubi volume %s", file, name );
+
+	log_printf( LOG_INFO, "will write %s to backup volume of ubi volume %s", file, name );
 
 	// Open ubi device
 	wpt::fd fd_ubi;
@@ -562,35 +563,22 @@ int ubi( const char *file, const char *target )
 		return -1;
 	}
 
-	// Lookup the volume id of the secondary volume
-	snprintf( s, sizeof( s ), "_%s", name );
-	int vol_id = lookup_ubivol_id( s, dev );
-	if( -1 == vol_id )
-		vol_id = UBI_VOL_NUM_AUTO;
-	else
-	{
-		// Need to delete the old volume as sizes may not match
-		if( -1 == ioctl( fd_ubi, UBI_IOCRMVOL, &vol_id ) )
-		{
-			log_printf( LOG_ERR, "ioctl( UBI_IOCRMVOL ) failed: (%i) %m", errno );
-			return -1;
-		}
+	// Lookup the volume id of the primary volume
+	int old_vol_id = lookup_ubivol_id( name, dev );
+	if( -1 == old_vol_id ) {
+		log_printf( LOG_ERR, "lookup_ubivol_id( %s ) failed: (%i) %m", s, errno );
+		return -1;
 	}
 
-	// Create the new volume
-	struct ubi_mkvol_req vol_req;
-	memset( &vol_req, 0, sizeof( vol_req ) );
-	vol_req.vol_id = vol_id;
-	vol_req.alignment = 1;
-	vol_req.bytes = entry.size;
-	vol_req.vol_type = UBI_STATIC_VOLUME;
-	vol_req.name_len = snprintf( vol_req.name, sizeof( vol_req.name ), "_%s", name );
-	if( -1 == ioctl( fd_ubi, UBI_IOCMKVOL, &vol_req ) )
-	{
-		log_printf( LOG_ERR, "ioctl( UBI_IOCMKVOL ) failed: (%i) %m", errno );
+	// Lookup the volume id of the secondary volume
+	snprintf( s, sizeof( s ), "%s-backup", name );
+	int vol_id = lookup_ubivol_id( s, dev );
+	if( -1 == vol_id ) {
+		log_printf( LOG_ERR, "lookup_ubivol_id( %s ) failed: (%i) %m", s, errno );
 		return -1;
 	}
-	vol_id = vol_req.vol_id;
+
+	log_printf( LOG_INFO, "writing %s to ubi volume %s, vol_id %i", file, s, vol_id );
 
 	// Open volume
 	wpt::fd fd_vol;
@@ -609,6 +597,7 @@ int ubi( const char *file, const char *target )
 		return -1;
 	}
 
+
 	// Write volume data
 	unsigned int size = entry.size;
 	while( size )
@@ -632,8 +621,9 @@ int ubi( const char *file, const char *target )
 	fd_vol.close();
 	fd_self.close();
 
+	log_printf( LOG_INFO, "swapping (updated) ubi volume %s (vol_id: %i) and (original) ubi volume %s (vol_id: %i)",s, vol_id, name, old_vol_id );
+
 	// Swap primary and secondary volumes
-	int old_vol_id = lookup_ubivol_id( name, dev );
 	struct ubi_rnvol_req ren_req;
 	memset( &ren_req, 0, sizeof( ren_req ));
 	ren_req.count = ( old_vol_id != -1 ? 2 : 1 );
@@ -642,7 +632,7 @@ int ubi( const char *file, const char *target )
 	if( -1 != old_vol_id )
 	{
 		ren_req.ents[ 1 ].vol_id = old_vol_id;
-		ren_req.ents[ 1 ].name_len = snprintf( ren_req.ents[ 1 ].name, sizeof( ren_req.ents[ 1 ].name ), "_%s", name );
+		ren_req.ents[ 1 ].name_len = snprintf( ren_req.ents[ 1 ].name, sizeof( ren_req.ents[ 1 ].name ), "%s-backup", name );
 	}
 	if( -1 == ioctl( fd_ubi, UBI_IOCRNVOL, &ren_req ))
 	{
