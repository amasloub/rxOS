#!/bin/sh

# (C) 2016 Outernet Inc

set -u

wgrib2="wgrib2"
base_dir="%JSONDESTINATION%"
grib_dir="%GRIBDESTINATION%"

wgrib_parse() {
    $wgrib2 "$@" -match "$INV" "$INFILE"
}

cut2() {
    cut -d "$1" -f "$2" | cut -d "$3" -f "$4"
}

cut1() {
    cut -d "$1" -f "$2"
}

txt2csv() {
    tr "\n" "," | sed 's/,$//'
}


forecast_hour() {
    fcast_hr=$(wgrib_parse -ftime | cut2 ":" 3 " " 1)
    if [ $fcast_hr = 'anl' ]
    then
        echo 0
    else
        echo $fcast_hr
    fi
}

isCurrent() {
    INFILE="$1"
    INV="$2"

    fcast_hr=$(wgrib_parse -ftime | cut2 ":" 3 " " 1)
    if [ $fcast_hr = 'anl' ]
    then
        return 0
    else
        return 1
    fi
}




to_json() {
INFILE="$1"
INV="$2"

echo '    {'
echo '        "header":{'
echo -n '            "discipline":'
echo $(wgrib_parse -disc  | cut2 = 2 " " 1 ) ','
echo -n '            "disciplineName":'
echo '"'$(wgrib_parse -disc | cut2 = 2 " " 2-)'"' ','
echo '            "gribEdition":2,'
echo -n '            "gribLength":'
echo $(wgrib_parse -Sec_len | cut2 "=" 2 " " 1) ','
echo -n '            "center":'
echo $(wgrib_parse -center  | cut1 "=" 2) ','
echo -n '            "centerName":'
echo '"'$(wgrib_parse -center -v2 | cut1 "=" 2-)'"' ','
echo '            "subcenter":0,'
echo -n '            "refTime":'
echo '"'$(date -Iseconds -u --date=@$(wgrib_parse -unix_time | cut2 = 2 : 1))'"' ','
echo -n '            "significanceOfRT":'
echo $(wgrib_parse -code_table_1.2 | cut2 = 2 " " 1) ','
echo -n '            "significanceOfRTName":'
echo '"'$(wgrib_parse -code_table_1.2 | cut2 = 2 " " 2-)'"' ','
echo -n '            "productStatus":'
echo $(wgrib_parse -code_table_1.3 | cut2 = 2 " " 1) ','
echo -n '            "productStatusName":'
echo '"'$(wgrib_parse -code_table_1.3 | cut2 = 2 " " 2-)'"' ','
echo -n '            "productType":'
echo $(wgrib_parse -code_table_1.4 | cut2 = 2 " " 1) ','
echo -n '            "productTypeName":'
echo '"'$(wgrib_parse -code_table_1.4 | cut2 = 2 " " 2-)'"' ','
echo -n '            "productDefinitionTemplate":'
echo $(wgrib_parse -code_table_4.0 | cut2 = 2 " " 1) ','
echo -n '            "productDefinitionTemplateName":'
echo '"'$(wgrib_parse -code_table_4.0 | cut2 = 2 " " 2-)'"' ','
echo -n '            "parameterCategory":'
echo $(wgrib_parse -varX -v2 | cut2 " " 4 "=" 2) ','
# TODO: echo -n            "parameterCategoryName":"Momentum",
echo -n '            "parameterNumber":'
echo $(wgrib_parse -varX -v2 | cut2 " " 5 "=" 2) ','
# TODO echo             "parameterNumberName":"U-component_of_wind", ***
# TODO echo             "parameterUnit":"m.s-1", ***
echo '            "genProcessType": 2,'
echo '            "genProcessTypeName":"Forecast",'
echo -n '            "forecastTime":'
echo  $(forecast_hour) ','
echo -n '            "surface1Type":'
echo $(wgrib_parse -v2 | cut1 ":" 5 | tr "()" "," | cut1 "," 2) ','
echo -n '            "surface1TypeName":'
echo '"'$(wgrib_parse -v2 | cut2 ":" 6 "(" 1)'"' ','
echo -n '            "surface1Value":'
echo $(wgrib_parse -v2 | cut1 ":" 5 | tr "()" "," | cut1 "," 3) ','
echo '            "surface2Type":255,'
echo '            "surface2TypeName":"Missing",'
echo '            "surface2Value":0.0,'
echo '            "gridDefinitionTemplate":0,'
echo '            "gridDefinitionTemplateName":"Latitude_Longitude",'
echo -n '            "numberPoints":'
echo $(wgrib_parse -grid | grep point | cut1 = 2) ','
echo '            "shape":6,'
echo '            "shapeName":"Earth spherical with radius of 6,371,229.0 m",'
echo '            "gridUnits":"degrees",'
echo -n '            "resolution":'
echo $(wgrib_parse -grid | grep res | cut1 " " 12) ','
# TODO echo '            "winds":"true",'
echo '            "scanMode":0,'
echo -n '            "nx":'
echo $(wgrib_parse -grid | grep lat-lon | tr "()" " " | cut1 " " 3) ','
echo -n '            "ny":'
echo $(wgrib_parse -grid | grep lat-lon | tr "()" " " | cut1 " " 5) ','
echo '            "basicAngle":0,'
echo '            "subDivisions":0,'
echo -n '            "lo1":'
echo $(wgrib_parse -grid | grep lon | grep to | cut1 " " 2) ','
echo -n '            "la1":'
echo $(wgrib_parse -grid | grep lat | grep to | cut1 " " 2) ','
echo -n '            "lo2":'
echo $(wgrib_parse -grid | grep lon | grep to | cut1 " " 4) ','
echo -n '            "la2":'
echo $(wgrib_parse -grid | grep lat | grep to | cut1 " " 4) ','
echo -n '            "dx":'
echo $(wgrib_parse -grid | grep lon | grep to | cut1 " " 6) ','
echo -n '            "dy":'
echo $(wgrib_parse -grid | grep lat | grep to | cut1 " " 6)
echo '        },'
echo -n '        "data": ['
echo $($wgrib2 "$INFILE" -inv /dev/null -no_header -match "$INV" -lola 0:360:1 90:181:-1 - text | txt2csv )
echo '        ]'
echo '    }'
}


# take grib file and write each json for it in the correct directory
grib="$1"
# get its target yyyy/mm/dd and hour tag
# get forecast time
fcast_time=$($wgrib2 -unix_time "$grib" | head -n 1 | sed  -r 's/.*unix_vt=([:digit:]*)/\1/')
if [ -z "$fcast_time" ]
then
    echo failed to process  "$grib"
    exit 0
fi
prefix="$(date --date="@$fcast_time" -u +%H)00"
yyyy="$(date --date="@$fcast_time" -u +%Y)"
mm="$(date --date="@$fcast_time" -u +%m)"
dd="$(date --date="@$fcast_time" -u +%d)"


dest_dir="${base_dir}/$yyyy/$mm/$dd"
[ -d "${dest_dir}" ] || mkdir -p "${dest_dir}"

current_dest_dir="${base_dir}/current"
[ -d "${current_dest_dir}" ] || mkdir -p "${current_dest_dir}"


# wind
inv="wind"
dest_file="${dest_dir}/${prefix}-${inv}-surface-level-gfs-1.0.json"
(
echo '['
to_json "$grib" ':UGRD:planetary boundary layer'
echo ","
to_json "$grib" ':VGRD:planetary boundary layer'
echo ']'
) > "${dest_file}"

if isCurrent "$grib" ':UGRD:planetary boundary layer'
then
    current_dest_file="${current_dest_dir}/current-${inv}-surface-level-gfs-1.0.json"
    cp "${dest_file}" "${current_dest_file}"
fi


# temp
inv="temp"
dest_file="${dest_dir}/${prefix}-${inv}-surface-level-gfs-1.0.json"
(
echo '['
to_json "$grib" ":TMP:surface:"
echo ']'
) > "${dest_file}"

if isCurrent "$grib" ":TMP:surface:"
then
    current_dest_file="${current_dest_dir}/current-${inv}-surface-level-gfs-1.0.json"
    cp "${dest_file}" "${current_dest_file}"
fi

# relative humidity
inv="relative_humidity"
dest_file="${dest_dir}/${prefix}-${inv}-surface-level-gfs-1.0.json"
(
echo '['
to_json "$grib" ":RH:entire atmosphere"
echo ']'
) > "${dest_file}"

if isCurrent "$grib" ":RH:entire atmosphere"
then
    current_dest_file="${current_dest_dir}/current-${inv}-surface-level-gfs-1.0.json"
    cp "${dest_file}" "${current_dest_file}"
fi


# total precipitable water
inv="total_precipitable_water"
dest_file="${dest_dir}/${prefix}-${inv}-gfs-1.0.json"
(
echo '['
to_json "$grib" ":PWAT:entire atmosphere"
echo ']'
) > "${dest_file}"

if isCurrent "$grib" ":PWAT:entire atmosphere"
then
    current_dest_file="${current_dest_dir}/current-${inv}-gfs-1.0.json"
    cp "${dest_file}" "${current_dest_file}"
fi

# total cloud water
inv="total_cloud_water"
dest_file="${dest_dir}/${prefix}-${inv}-gfs-1.0.json"
(
echo '['
to_json "$grib" ":CWAT:entire atmosphere"
echo ']'
) > "${dest_file}"

if isCurrent "$grib" ":CWAT:entire atmosphere"
then
    current_dest_file="${current_dest_dir}/current-${inv}-gfs-1.0.json"
    cp "${dest_file}" "${current_dest_file}"
fi

# pressure at mean sea level
inv="mean_sea_level_pressure"
dest_file="${dest_dir}/${prefix}-${inv}-gfs-1.0.json"
(
echo '['
to_json "$grib" ":PRMSL:mean sea level:"
echo ']'
) > "${dest_file}"

if isCurrent "$grib" ":PRMSL:mean sea level:"
then
    current_dest_file="${current_dest_dir}/current-${inv}-gfs-1.0.json"
    cp "${dest_file}" "${current_dest_file}"
fi

# put the grib file in the correct folder
latest=$(echo "$grib" | cut1 _ 1)
grib_fname=$(echo "$grib" | cut1 _ 2)
[ -d "${grib_dir}/${latest}" ] || mkdir -p "${grib_dir}/${latest}"
mv "$grib" "${grib_dir}/${latest}/${grib_fname}"

# make librarian happy
ONFSCHANGE='/usr/bin/oncontentchange'
$ONFSCHANGE

